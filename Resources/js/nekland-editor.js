// Generated by CoffeeScript 1.6.3
(function() {
  var uniqid;

  (function($) {
    /*
      Nekland Editor
    
      For options parameter, see documentation
      For templates parameter, all is function, see documentation
    */

    return $.fn.neklandEditor = function(_options, _templates) {
      var $editor, $textarea, $wrapper, settings, switchEditor, templates;
      if (_options == null) {
        _options = {};
      }
      if (_templates == null) {
        _templates = {};
      }
      /*
        Settings:
      
        -> "uid" is an unique id used to show multiple editors on a page
      */

      settings = $.extend({
        mode: 'classical',
        uid: uniqid()
      }, _options);
      /*
        Templates definition.
        In this plugin, templates are simple functions.
      */

      templates = $.extend({
        /*
          Make buttons
          takes an array of functions
        */

        buttons: function(buttons) {
          var button, tpl, _i, _len;
          tpl = '<div>';
          for (_i = 0, _len = buttons.length; _i < _len; _i++) {
            button = buttons[_i];
            tpl += button();
          }
          return tpl += '</div>';
        },
        classicalButtons: function() {
          return '<button class="btn"><b>Bold</b></button>';
        },
        /*
          Main template, include others
          The nekland-editor-html class is needed
        */

        main: function(buttons, size) {
          var tpl;
          tpl = buttons;
          tpl += '<div class="nekland-editor-html" style="width:' + size[0] + 'px;height:' + size[1] + 'px" contenteditable></div>';
          return tpl += '<a href="#" class="nekland-switch-button">Switch</a>';
        },
        /*
          Load the whole templates
        */

        load: function($element, uid) {
          var $wrapper;
          $wrapper = $('<div>', {
            id: 'nekland-eiditor-wrapper-' + uid
          });
          $element.wrap($wrapper);
          $element.after(this.main(this.buttons([this.classicalButtons]), [$element.width(), $element.height()]));
          $element.hide();
          console.log($wrapper.find('.nekland-switch-button')[0]);
          $wrapper.find('.nekland-switch-button').click(function() {
            switchEditor($('.nekland-editor-html'), $element);
            return false;
          });
          return $wrapper;
        }
      }, _templates);
      switchEditor = function($editor, $textarea) {
        if ($editor.is(':visible')) {
          $editor.hide();
          return $textarea.show();
        } else {
          $textarea.hide();
          return $editor.show();
        }
      };
      $textarea = this;
      $wrapper = templates.load(this, settings.uid);
      $editor = $wrapper.find('.nekland-editor-html');
      return this;
    };
  })(jQuery);

  uniqid = function(prefix, more_entropy) {
    var formatSeed, retId;
    if (typeof prefix === 'undefined') {
      prefix = "";
    }
    formatSeed = function(seed, reqWidth) {
      seed = parseInt(seed, 10).toString(16);
      if (reqWidth < seed.length) {
        return seed.slice(seed.length - reqWidth);
      }
      if (reqWidth > seed.length) {
        return Array(1 + (reqWidth - seed.length)).join('0') + seed;
      }
      return seed;
    };
    if (!this.php_js) {
      this.php_js = {};
    }
    if (!this.php_js.uniqidSeed) {
      this.php_js.uniqidSeed = Math.floor(Math.random() * 0x75bcd15);
    }
    this.php_js.uniqidSeed++;
    retId = prefix;
    retId += formatSeed(parseInt(new Date().getTime() / 1000, 10), 8);
    retId += formatSeed(this.php_js.uniqidSeed, 5);
    if (more_entropy) {
      retId += (Math.random() * 10).toFixed(8).toString();
    }
    return retId;
  };

}).call(this);

/*
//@ sourceMappingURL=nekland-editor.map
*/
